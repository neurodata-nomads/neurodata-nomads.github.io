{
  "_args": [
    [
      {
        "raw": "detect-touch-events@^2.0.1",
        "scope": null,
        "escapedName": "detect-touch-events",
        "name": "detect-touch-events",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/Users/bijanvarjavand/Envs/spring18/ndd/neurodata-nomads.github.io/node_modules/detect-it"
    ]
  ],
  "_from": "detect-touch-events@>=2.0.1 <3.0.0",
  "_id": "detect-touch-events@2.0.1",
  "_inCache": true,
  "_location": "/detect-touch-events",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/detect-touch-events-2.0.1.tgz_1506364588856_0.9483062077779323"
  },
  "_npmUser": {
    "name": "rafrex",
    "email": "code@rafrex.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "detect-touch-events@^2.0.1",
    "scope": null,
    "escapedName": "detect-touch-events",
    "name": "detect-touch-events",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/detect-it"
  ],
  "_resolved": "https://registry.npmjs.org/detect-touch-events/-/detect-touch-events-2.0.1.tgz",
  "_shasum": "365833cf0c5c40c4090a08096b8a688db00fa337",
  "_shrinkwrap": null,
  "_spec": "detect-touch-events@^2.0.1",
  "_where": "/Users/bijanvarjavand/Envs/spring18/ndd/neurodata-nomads.github.io/node_modules/detect-it",
  "author": {
    "name": "Rafael Pedicini",
    "email": "code@rafrex.com"
  },
  "bugs": {
    "url": "https://github.com/rafrex/detect-touch-events/issues"
  },
  "dependencies": {},
  "description": "Detect if the browser supports the touch events api",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-eslint": "^7.2.3",
    "babel-preset-env": "^1.4.0",
    "eslint": "^3.19.0",
    "eslint-config-airbnb-base": "^11.1.3",
    "eslint-plugin-import": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "365833cf0c5c40c4090a08096b8a688db00fa337",
    "tarball": "https://registry.npmjs.org/detect-touch-events/-/detect-touch-events-2.0.1.tgz"
  },
  "files": [
    "lib",
    "src"
  ],
  "gitHead": "17e6498b36be897e64ac41eaef57c985788785c2",
  "homepage": "https://github.com/rafrex/detect-touch-events#readme",
  "keywords": [
    "detect",
    "touch",
    "touch events",
    "touch device"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "rafrex",
      "email": "code@rafrex.com"
    }
  ],
  "name": "detect-touch-events",
  "optionalDependencies": {},
  "readme": "# Detect Touch Events\n\nDetect if the browser supports the Touch Events API.\n\n[Live detection test][liveDetectionTest]\n\nExports a reference to a singleton object (a micro state machine with an update function) with its state set to if the device supports the Touch Events API, as well as an `update()` function which re-runs the tests and updates the object's state.\n\nNote that `detect-touch-events` is one of the micro state machines used by [`detect-it`][detectItRepo] to determine if a device is `mouseOnly`, `touchOnly`, or `hybrid`.\n\n*For more information on the touch events api, please see [MDN's Touch Events][mdnTouchEvents], or the [W3C Touch Events specification][w3cSpecLatest].*\n\n\n### `detectTouchEvents` micro state machine\n```javascript\nconst detectTouchEvents = {\n  hasSupport: true / false,\n  browserSupportsApi: true / false,\n\n  // re-run all the detection tests and update state\n  update() {...},\n}\n```\n\n### Installing `detect-touch-events`\n```terminal\n$ npm install --save detect-touch-events\n```\n\n### Using `detect-touch-events`\n```javascript\nimport detectTouchEvents from 'detect-touch-events';\n```\n```javascript\n// touch events api is present on a device with a touch screen - *most useful*\ndetectTouchEvents.hasSupport === true;\n\n// browser supports the touch events api, but the device may or may not have a touch screen\ndetectTouchEvents.browserSupportsApi === true;\n\n// updating the state - most apps won't need to use this at all\ndetectTouchEvents.update();\n```\n\n```javascript\n/*\n * note that in the case of a browser that doesn't support touch events,\n * including when using a legacy computer and browser, the default state will be:\n */\nconst detectTouchEvents = {\n  hasSupport: false,\n  browserSupportsApi: false,\n}\n```\n\nNote that `hasSupport` is still just an api presence test and some browsers (notably Firefox) may give a false positive (saying it has support on a device without a touch screen), so it is recommended to use [`detect-it`][detectItRepo] which factors in other tests as well to determine device capabilities.\n\nNote that the `update()` function is run once at the time of import to set the object's initial state, and generally doesn't need to be run again. If it doesn't have access to the `window`, then the state will be `undefined` (`detect-touch-events` will not throw an error), and you will need to call the `update()` function manually at a later time to update its state.\n\n\n### Part of the [`detect-it`][detectItRepo] family\n- [`detect-it`][detectItRepo]\n  - [`detect-hover`][detectHoverRepo]\n  - [`detect-pointer`][detectPointerRepo]\n  - **`detect-touch-events`**\n  - [`detect-passive-events`][detectPassiveEventsRepo]\n\n\n<!-- links -->\n[liveDetectionTest]: http://detect-it.rafrex.com/#detect-touch-events\n[w3cSpecLatest]: https://w3c.github.io/touch-events/\n[mdnTouchEvents]: https://developer.mozilla.org/en-US/docs/Web/API/Touch_events\n[detectItRepo]: https://github.com/rafrex/detect-it\n[detectHoverRepo]: https://github.com/rafrex/detect-hover\n[detectPointerRepo]: https://github.com/rafrex/detect-pointer\n[detectPassiveEventsRepo]: https://github.com/rafrex/detect-passive-events\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rafrex/detect-touch-events.git"
  },
  "scripts": {
    "build": "rm -rf lib && babel src -d lib --presets=env",
    "prepublish": "npm run build"
  },
  "version": "2.0.1"
}
